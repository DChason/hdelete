#! /usr/bin/python3

import argparse
import fnmatch
import os
import sys

DEFAULT_PATTERNS = [".DS_Store", "Thumbs.db", "._*"]
DESCRIPTION = "A simple tool to find and delete hidden OS files like thumbs.db, ds_store, and ._*."
HELP_ALTERNATIVE = "Use only these patterns, replacing the default list (space-separated, e.g. -A '*.bak' '*~')."
HELP_APPEND = "Append patterns to the default list (space-separated, e.g. -a '*.log' '*.tmp')."
HELP_DIRECTORY = "The directory to run hdelete if you do not want to run in the current directory."
MSG_ACTION_CANCELLED = "Action cancelled by user."
MSG_DANGEROUS_DIRECTORY = "Refusing to run in the root directory. Please specify a safer directory."
MSG_DELETED = "Deleted:"
MSG_ERROR_DELETING = "Error deleting"
MSG_FILES_DELETED = "Files deleted."
MSG_FOUND_FILES = "Found files:"
MSG_NO_MATCHING_FILES = "There are no files matching defined patterns in"
MSG_WARNING_THRESHOLD = "Are you sure you want to delete this many files? Please double-check to ensure that no important files are included."
PROMPT_CONFIRM_DELETE = "Do you want to delete these files? [Y/n]: "
WARNING_THRESHOLD = 25


def parse_args() -> argparse.Namespace:
    """Parses arguments from the command line."""
    parser = argparse.ArgumentParser(
        description=DESCRIPTION,
        epilog=f"""
            Examples:
              hdelete
                Run with default patterns ({', '.join(DEFAULT_PATTERNS)}) in the current directory.

              hdelete -d /tmp
                Run with default patterns ({', '.join(DEFAULT_PATTERNS)}) in /tmp.

              hdelete -a '*.log' '*.tmp'
                Append '*.log' and '*.tmp' patterns to the default list.

              hdelete -A '*.bak' '*~'
                Use only '*.bak' and '*~' as patterns (replacing the defaults).

              hdelete -y
                Run in non-interactive mode (auto-accept deletes).
            """,
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument('-d', '--directory', default=os.getcwd(), type=str, help=HELP_DIRECTORY)
    parser.add_argument('-y', '--yes', action='store_true', help='Automatically confirm file deletion (non-interactive mode).')
    pattern_mode = parser.add_mutually_exclusive_group()
    pattern_mode.add_argument('-a', '--append', nargs='+', metavar='PATTERN', help=HELP_APPEND)
    pattern_mode.add_argument('-A', '--alternative', nargs='+', metavar='PATTERN', help=HELP_ALTERNATIVE)
    return parser.parse_args()


def is_root_directory(path: str) -> bool:
    """Ensures hdelete is not running in the root directory."""
    absolute_path = os.path.abspath(path)
    if os.name == "nt":
        drive, tail = os.path.splitdrive(absolute_path)
        return tail in ("\\", "/")
    else:
        return absolute_path == "/"


def select_patterns(args) -> list:
    """Selects the patterns to use based on the command line arguments."""
    if args.alternative:
        return args.alternative
    elif args.append:
        return DEFAULT_PATTERNS + args.append
    return DEFAULT_PATTERNS


def format_file_size(size_bytes: int) -> str:
    """Convert bytes to human readable format."""
    if size_bytes == 0:
        return "0 B"
    for unit in ['B', 'KB', 'MB', 'GB']:
        if size_bytes < 1024.0:
            return f"{size_bytes:.1f} {unit}"
        size_bytes /= 1024.0
    return f"{size_bytes:.1f} TB"


def find_files(directory: str, patterns=None) -> list:
    """Finds files in the specified directory that match the defined patterns."""
    if patterns is None:
        patterns = DEFAULT_PATTERNS
    matching_files = []
    for root, _, files in os.walk(directory):
        for filename in files:
            if any(fnmatch.fnmatch(filename, pattern) for pattern in patterns):
                matching_files.append(os.path.join(root, filename))
    if not matching_files:
        print(f"{MSG_NO_MATCHING_FILES} '{directory}'")
        sys.exit(0)
    return sorted(matching_files)


def prompt_user_delete(files: list, auto_accept: bool = False) -> list:
    """Prompts the user to confirm the deletion of the files found. If auto_accept is True, skip prompt."""
    print(MSG_FOUND_FILES)
    total_size = 0
    for i, file in enumerate(files):
        try:
            file_size = os.path.getsize(file)
            total_size += file_size
            size_str = format_file_size(file_size)
            print(f"{i + 1}: {file} ({size_str})")
        except OSError:
            print(f"{i + 1}: {file} (size unknown)")
    
    print(f"\nTotal: {len(files)} file{'s' if len(files) != 1 else ''}, {format_file_size(total_size)}")
    
    if len(files) > WARNING_THRESHOLD:
        print(f"\nWarning: More than {WARNING_THRESHOLD} files found!")
        print(f"{MSG_WARNING_THRESHOLD}")
    if auto_accept:
        print("Auto-accept enabled: proceeding with deletion.")
        return files
    confirm_delete = input(f"\n{PROMPT_CONFIRM_DELETE}")
    if confirm_delete.strip().lower() not in ("y", "yes"):
        print(MSG_ACTION_CANCELLED)
        sys.exit(0)
    return files


def delete_files(files: list) -> None:
    """Deletes the specified files."""
    for file in files:
        try:
            os.remove(file)
            print(f"{MSG_DELETED} '{file}'")
        except Exception as e:
            print(f"{MSG_ERROR_DELETING} '{file}': {e}")
    print(MSG_FILES_DELETED)


def main() -> None:
    args = parse_args()

    if is_root_directory(args.directory):
        print(MSG_DANGEROUS_DIRECTORY)
        sys.exit(1)

    patterns = select_patterns(args)
    files = find_files(args.directory, patterns)
    files_to_delete = prompt_user_delete(files, auto_accept=getattr(args, 'yes', False))
    delete_files(files_to_delete)


if __name__ == '__main__':
    main()
